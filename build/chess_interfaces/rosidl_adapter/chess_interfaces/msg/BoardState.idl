// generated from rosidl_adapter/resource/msg.idl.em
// with input from chess_interfaces/msg/BoardState.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Point.idl"
#include "std_msgs/msg/Header.idl"

module chess_interfaces {
  module msg {
    typedef int8 int8__64[64];
    typedef geometry_msgs::msg::Point geometry_msgs__msg__Point;
    typedef geometry_msgs__msg__Point geometry_msgs__msg__Point__64[64];
    typedef boolean boolean__4[4];
    @verbatim (language="comment", text=
      "棋盘状态消息" "\n"
      "用于表示8x8象棋棋盘的完整状态")
    struct BoardState {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "棋盘格子状态 (64个格子，按行列顺序)" "\n"
        "0=空格 1-6=白方棋子 -1到-6=黑方棋子" "\n"
        "1=王 2=后 3=车 4=象 5=马 6=兵")
      int8__64 board_squares;

      @verbatim (language="comment", text=
        "每个格子的3D坐标位置")
      geometry_msgs__msg__Point__64 square_positions_3d;

      @verbatim (language="comment", text=
        "游戏状态信息" "\n"
        "是否轮到白方")
      boolean white_to_move;

      @verbatim (language="comment", text=
        "易位权利 [白王侧, 白后侧, 黑王侧, 黑后侧]")
      boolean__4 castling_rights;

      @verbatim (language="comment", text=
        "吃过路兵目标格子 (-1表示无)")
      int8 en_passant_square;

      @verbatim (language="comment", text=
        "半回合计数")
      int32 halfmove_clock;

      @verbatim (language="comment", text=
        "完整回合数")
      int32 fullmove_number;
    };
  };
};
